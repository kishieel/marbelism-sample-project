enum UserStatus {
    INVITED
    VERIFIED
}

model User {
    id                 String              @id @default(uuid())
    name               String?
    email              String?             @unique
    pictureUrl         String?             @default('https://i.imgur.com/ZdJSK3Y.jpeg')
    tokenInvitation    String?

    status             UserStatus          @default(VERIFIED)

    // this is the role of the user for the application
    globalRole         String              @default('USER')
    password           String?             @password @omit
    createdAt          DateTime            @default(now())
    updatedAt          DateTime            @updatedAt @default(now())

    pwaSubscriptions   PwaSubscription[]   @relation("user")

    journeys           Journey[]           @relation("user")
    subscriptions      Subscription[]      @relation("user")
    savedRoutes        SavedRoute[]        @relation("user")
    delays             Delay[]             @relation("user")
    delayVerifications DelayVerification[] @relation("user")

    @@auth()
    @@allow("all", auth().id == this.id)
    @@allow('all', auth().globalRole == 'ADMIN')

    //we only allow that user to register if they don't create an admin role
    @@allow("create", globalRole != 'ADMIN')
    @@allow("read", true)
}

model Route {

    id                String         @id @default(uuid())
    name              String
    type              String
    startLocation     String
    endLocation       String
    estimatedDuration Float

    stops             Stop[]         @relation("route")
    journeyRoutes     JourneyRoute[] @relation("route")
    subscriptions     Subscription[] @relation("route")
    savedRoutes       SavedRoute[]   @relation("route")
    delays            Delay[]        @relation("route")
    createdAt         DateTime       @default(now())
    updatedAt         DateTime       @updatedAt @default(now())
    @@allow("all", true)
}

model Stop {

    id        String   @id @default(uuid())
    name      String
    latitude  String
    longitude String

    routeId   String
    route     Route?   @relation(fields: [routeId], references: [id], name: "route")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @default(now())
    @@allow("all", true)
}

model Journey {

    id            String         @id @default(uuid())
    startLocation String
    endLocation   String
    status        String

    userId        String
    user          User?          @relation(fields: [userId], references: [id], name: "user")

    journeyRoutes JourneyRoute[] @relation("journey")
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt @default(now())
    @@allow("all", true)
}

model JourneyRoute {

    id        String   @id @default(uuid())
    sequence  Float

    journeyId String
    journey   Journey? @relation(fields: [journeyId], references: [id], name: "journey")
    routeId   String
    route     Route?   @relation(fields: [routeId], references: [id], name: "route")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @default(now())
    @@allow("all", true)
}

model Subscription {

    id               String   @id @default(uuid())
    notificationType String

    userId           String
    user             User?    @relation(fields: [userId], references: [id], name: "user")
    routeId          String
    route            Route?   @relation(fields: [routeId], references: [id], name: "route")

    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt @default(now())
    @@allow("all", true)
}

model SavedRoute {

    id        String   @id @default(uuid())
    name      String
    frequency String?

    userId    String
    user      User?    @relation(fields: [userId], references: [id], name: "user")
    routeId   String
    route     Route?   @relation(fields: [routeId], references: [id], name: "route")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @default(now())
    @@allow("all", true)
}

model Delay {

    id                 String              @id @default(uuid())
    latitude           String
    longitude          String
    delayMinutes       Float
    status             String
    photoUrl           String?
    description        String?

    userId             String
    user               User?               @relation(fields: [userId], references: [id], name: "user")
    routeId            String
    route              Route?              @relation(fields: [routeId], references: [id], name: "route")

    delayVerifications DelayVerification[] @relation("delay")
    createdAt          DateTime            @default(now())
    updatedAt          DateTime            @updatedAt @default(now())
    @@allow("all", true)
}

model DelayVerification {

    id         String   @id @default(uuid())
    isVerified Boolean

    delayId    String
    delay      Delay?   @relation(fields: [delayId], references: [id], name: "delay")
    userId     String
    user       User?    @relation(fields: [userId], references: [id], name: "user")

    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt @default(now())
    @@allow("all", true)
}

model PwaSubscription {
    id        String   @id @default(uuid())
    content   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @default(now())

    userId    String   @default(auth().id)
    user      User     @relation(fields: [userId], references: [id], name: 'user')

    @@allow("all", true)
}

